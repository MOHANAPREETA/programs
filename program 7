//Infix to postfix

import java.util.Stack;
import java.util.Scanner;
import java.lang.String;


class Main {

    public static int precedence(char operator) {
        switch (operator) {
            case '+':
            case '-':
                return 1;
            case '*':
            case '/':
                return 2;
            case '^':
                return 3;

        }
        return -1;
    }

    public static boolean check(char op1, char op2) {
        return precedence(op1) >= precedence(op2);
    }

    public static String infixtopost(String n) {
        StringBuilder postfix = new StringBuilder();

        Stack<Character> stack = new Stack<>();// Stack<String> stack = new Stack<>();

        for (int i = 0; i < n.length(); i++) {
            char c = n.charAt(i);


            if (Character.isLetterOrDigit(c)) {
                postfix.append(c);         //if(Letter or Digits)  stack.push(
            } else if (c == '(') {
                stack.push(c);
            } else if (c == ')') {
                while (!stack.isEmpty() && stack.peek() != '(') {
                    postfix.append(stack.pop());
                }
                stack.pop();
            } else {
                while (!stack.isEmpty() && stack.peek() != '(' && check(stack.peek(), c)) {
                    postfix.append(stack.pop());
                }
                stack.push(c);
            }
        }

        while (!stack.isEmpty()) {
            postfix.append(stack.pop());
        }
        return postfix.toString();
    }

    public static void main(String[] args) {
        Scanner b = new Scanner(System.in);
        char ch;

        String n = b.nextLine();
        for (int i = 0; i < n.length(); i++) {
            ch = n.charAt(i); //extracts each character
            n = ch + n; //adds each character in front of the existing string
        }


        String result = infixtopost(n);
        System.out.println(result);
    }
}
