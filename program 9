import java.util.*;

class Graph {
    ArrayList<ArrayList<Integer>> list = new ArrayList<>();

    Graph(int v) {
        for (int i = 0; i < v; i++) {
            list.add(new ArrayList<>());
        }
    }

    public void push(int u, int v) {
        list.get(u).add(v);
        list.get(v).add(u);
    }

    public void display() {
        for (int i = 0; i < list.size(); i++) {
            System.out.println("Vertex: " + i);
            for (int j = 0; j < list.get(i).size(); j++) {
                System.out.println(" " + list.get(i).get(j));
            }
        }
    }

    public void bfs(int v) {
        boolean[] arr = new boolean[list.size()];
        Queue<Integer> queue = new LinkedList<>();
        queue.add(v);
        arr[v] = true;

        while (!queue.isEmpty()) {
            int x = queue.poll();
            System.out.print(x + " ");
            for (int i = 0; i < list.get(x).size(); i++) {
                int k = list.get(x).get(i);
                if (!arr[k]) {
                    queue.add(k);
                    arr[k] = true;
                }
            }
        }
    }

    public void dfs(int v) {
        boolean[] arr = new boolean[list.size()];
        dfsl(v, arr);
    }

    public void dfsl(int v, boolean[] arr) {
        arr[v] = true;
        System.out.println(v + " ");
        for (int i = 0; i < list.get(v).size(); i++) {
            int k = list.get(v).get(i);
            if (!arr[k]) {
                dfsl(k, arr);
            }
        }
    }

    public static void main(String[] args) {
        Scanner b = new Scanner(System.in);
        int size = b.nextInt();
        Graph g = new Graph(size);

        for (int i = 0; i < size; i++) {
            int u = b.nextInt();
            int v = b.nextInt();
            g.push(u, v);
        }


        g.bfs(0); // Start BFS from vertex 0
        g.dfs(0); // Start DFS from vertex 0
        g.display();
    }
}


